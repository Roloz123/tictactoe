/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TicTacToePackage;

import javax.swing.JButton;



/**
 *
 * @author malil6384
 */
public class TicTacToeGame extends javax.swing.JFrame {

    /**
     * Creates new form TicTacToeGame
     */
    public TicTacToeGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnSlot1 = new javax.swing.JButton();
        btnSlot2 = new javax.swing.JButton();
        btnSlot3 = new javax.swing.JButton();
        btnSlot4 = new javax.swing.JButton();
        btnSlot5 = new javax.swing.JButton();
        btnSlot6 = new javax.swing.JButton();
        btnSlot7 = new javax.swing.JButton();
        btnSlot8 = new javax.swing.JButton();
        btnSlot9 = new javax.swing.JButton();
        lblXWinCount = new javax.swing.JLabel();
        lblOWinCount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Nirmala UI", 0, 15)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 100, 200));
        lblTitle.setText("Tic Tac Toe!");

        btnSlot1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot1ActionPerformed(evt);
            }
        });

        btnSlot2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot2ActionPerformed(evt);
            }
        });

        btnSlot3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot3ActionPerformed(evt);
            }
        });

        btnSlot4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot4ActionPerformed(evt);
            }
        });

        btnSlot5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot5ActionPerformed(evt);
            }
        });

        btnSlot6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot6ActionPerformed(evt);
            }
        });

        btnSlot7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot7ActionPerformed(evt);
            }
        });

        btnSlot8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot8ActionPerformed(evt);
            }
        });

        btnSlot9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot9ActionPerformed(evt);
            }
        });

        lblXWinCount.setForeground(new java.awt.Color(0, 100, 200));
        lblXWinCount.setText("X Wins: 0");

        lblOWinCount.setForeground(new java.awt.Color(0, 100, 200));
        lblOWinCount.setText("O Wins: 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(btnSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSlot6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOWinCount, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblXWinCount, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSlot4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSlot5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSlot7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSlot8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSlot9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSlot1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSlot2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSlot3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnSlot4, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                                .addComponent(btnSlot5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnSlot6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSlot8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSlot7, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(btnSlot9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(124, 124, 124))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblXWinCount)
                        .addGap(18, 18, 18)
                        .addComponent(lblOWinCount)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot1ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot1);
        updateBoard(0, 0);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot1ActionPerformed

    private void btnSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot2ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot2);
        updateBoard(0, 1);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot2ActionPerformed

    private void btnSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot3ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot3);
        updateBoard(0, 2);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot3ActionPerformed

    private void btnSlot6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot6ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot6);
        updateBoard(1, 2);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot6ActionPerformed

    private void btnSlot5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot5ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot5);
        updateBoard(1, 1);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot5ActionPerformed

    private void btnSlot4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot4ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot4);
        updateBoard(1, 0);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot4ActionPerformed

    private void btnSlot9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot9ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot9);
        updateBoard(2, 2);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot9ActionPerformed

    private void btnSlot8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot8ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot8);
        updateBoard(2, 1);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot8ActionPerformed

    private void btnSlot7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot7ActionPerformed
        //Checking if turn is true or false, updating text depending on result
        play();
        updateText(btnSlot7);
        updateBoard(2, 0);
        checkWin();
        winnerDecision();
    }//GEN-LAST:event_btnSlot7ActionPerformed

    //Variable declaration
    //Number to decide player's turn
    public int turnNum = 0;
    //Boolean to decide what to set text on buttons to
    public boolean turn;
    //Winner variable
    public boolean xWinner;
    public boolean oWinner;
    //Winner counting variable
    public int xWinCount;
    public int oWinCount;
    //Method creation
    public void play(){
        //Checks if the turnNum is equal or odd
        if(turnNum % 2 == 0){
            turn = true;
        } else {
            turn = false;
        }
        
        //Increase turn int for next player's turn
        turnNum++;
    }
    
    //Updates text based on turn boolean
    public void updateText(JButton btn){
        if(turn == true){
            btn.setText("X");   
        } else {
            btn.setText("O"); 
        }
        
    }
    
    public int[][] board = {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}
    };
    
    public void checkWin(){
        int turnCheck;
        if(turn == true){
            turnCheck = 1;
        } else {
            turnCheck = 2;
        }
        
        //Runs checkboard function based on turn variable
        checkBoard(turnCheck);
    }
    
    public void checkBoard(int check){
        //Checks every possible win combo
        //Checks horizontal win combos
        checkTop(check);
        checkMid(check);
        checkBot(check);
        //Left vertical
        if(board[0][0] == check && board[1][0] == check && board[2][0] == check) {
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
            
        //Middle vertical
        } else if(board[0][1] == check && board[1][1] == check && board[2][1] == check){
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
        //Right vertical
        } else if(board[0][2] == check && board[1][2] == check && board[2][2] == check){
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
        //Top right to bottom left diagonal
        } else if(board[0][0] == check && board[1][1] == check && board[2][2] == check){
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
        //Top left to bottom right diagonal
        } else if(board[0][2] == check && board[1][1] == check && board[2][0] == check){
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
        }
        
    }
    
    public void checkTop (int check){
        //Local int for win check
        int trueCount = 0;
        //Checks top row
        for(int i = 0; i<3; i++){
            if(board[0][i] == check){
                trueCount++;
            }
        }     
        
        //Give win code
        if(trueCount == 3){
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
        }
    }
    
    public void checkMid(int check){
        //Local int for win check
        int trueCount = 0;
        
         //Checks middle row
        for(int x = 0; x<3; x++){
            if(board[1][x] == check){
                trueCount++;
            }
        }
        
        //Give win code
        if(trueCount == 3){
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
        }
    }
    
    public void checkBot(int check){
        //Local int for win check
        int trueCount = 0;
        
         //Checks bottom row
        for(int y = 0; y<3; y++){
            if(board[2][y] == check){
                trueCount++;
            }
        } 
        
        //Give win code
        if(trueCount == 3){
            if(check == 1){
                xWinner = true;
            } else {
                oWinner = true;
            }
        }
    }
    
    public void updateBoard(int slotY, int slotX){
        int playerNum = 0;
        if(turn == true){
            playerNum = 1;
        } else {
            playerNum = 2;
        }
        //Update board array to match inputs
        board[slotY][slotX] = playerNum;
    }
    
    public void winnerDecision(){
        if(xWinner == true){
            //Increase win counter
            xWinCount++;
            //Updates win counter text
            lblXWinCount.setText("X Wins: " + xWinCount);
            //Resets the board
            boardReset(); 
        } else if(oWinner == true){
            //Increases win counter
            oWinCount++;
            //Updates win counter text
            lblOWinCount.setText("O Wins: " + oWinCount);
            //Resets the board
            boardReset();
        }
    }
    
    public void boardReset(){
        //Resets top row
        for(int i = 0; i<3; i++){
            board[0][i] = 0;
        }
        //Resets middle row
        for(int x = 0; x<3; x++){
            board[1][x] = 0;
        }
        //Resets bottom row
        for(int y = 0; y<3; y++){
            board[2][y] = 0;
        }
        
        //Resets text displayed on buttons
        btnSlot1.setText("");
        btnSlot2.setText("");
        btnSlot3.setText("");
        btnSlot4.setText("");
        btnSlot5.setText("");
        btnSlot6.setText("");
        btnSlot7.setText("");
        btnSlot8.setText("");
        btnSlot9.setText("");
        
        //Resets win variables
        xWinner = false;
        oWinner = false;
        
        //Reset turn variable
        turnNum = 0;
    }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacToeGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSlot1;
    private javax.swing.JButton btnSlot2;
    private javax.swing.JButton btnSlot3;
    private javax.swing.JButton btnSlot4;
    private javax.swing.JButton btnSlot5;
    private javax.swing.JButton btnSlot6;
    private javax.swing.JButton btnSlot7;
    private javax.swing.JButton btnSlot8;
    private javax.swing.JButton btnSlot9;
    private javax.swing.JLabel lblOWinCount;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblXWinCount;
    // End of variables declaration//GEN-END:variables
}
